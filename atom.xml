<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>这世界很酷K</title>
  
  <subtitle>我奔涌的暖流，寻找你的海洋</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2017-09-10T05:46:48.687Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>酷K</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>博文公园</title>
    <link href="http://yoursite.com/2017/09/10/Web%E9%9A%8F%E5%BF%83%E8%AE%B02/"/>
    <id>http://yoursite.com/2017/09/10/Web随心记2/</id>
    <published>2017-09-10T05:44:37.095Z</published>
    <updated>2017-09-10T05:46:48.687Z</updated>
    
    <content type="html"><![CDATA[<h1 id="技术掌握"><a href="#技术掌握" class="headerlink" title="技术掌握"></a>技术掌握</h1><h3 id="1-HTML-和-CSS，书写语义合理、结构清晰、易于维护的页面结构，还原设计图，并处流浏览器的兼容性问题；"><a href="#1-HTML-和-CSS，书写语义合理、结构清晰、易于维护的页面结构，还原设计图，并处流浏览器的兼容性问题；" class="headerlink" title="1. HTML 和 CSS，书写语义合理、结构清晰、易于维护的页面结构，还原设计图，并处流浏览器的兼容性问题；"></a>1. HTML 和 CSS，书写语义合理、结构清晰、易于维护的页面结构，还原设计图，并处流浏览器的兼容性问题；</h3><ol><li>根据内容的结构化（内容语义化），选择合适的标签（代码语义化）便于开发者阅读和写出更优雅的代码的同时让浏览器的爬虫和机器很好地解析。</li><li>在没有CSS的情况下，页面也能呈现出很好地内容结构、代码结构;</li><li>有利于SEO：和搜索引擎建立良好沟通，有助于爬虫抓取更多的有效信息：爬虫依赖于标签来确定上下文和各个关键字的权重；</li><li>HTML是结构  css是样式  js是行为</li></ol><ul><li>浏览器兼容性：</li></ul><ol><li>透明度filter: alpha(opacity=60); /<em> for IE5-7 </em>/</li><li>双边距BUG float引起的  使用_display:inline;</li><li>IE6不支持PNG透明背景，解决办法: IE6下使用gif图片</li><li>IE下可以box[‘data-title’]  也可以box.getAttribute(‘’data-title’)获取自定义，但是谷歌和火狐不可以</li><li>IE8的window.event没有pagex pagey</li></ol><h3 id="2-理解JavaScript高级特性（如OP、继承、原型链、闭包等），ES6新特性；"><a href="#2-理解JavaScript高级特性（如OP、继承、原型链、闭包等），ES6新特性；" class="headerlink" title="2. 理解JavaScript高级特性（如OP、继承、原型链、闭包等），ES6新特性；"></a>2. 理解JavaScript高级特性（如OP、继承、原型链、闭包等），ES6新特性；</h3><p>JS是一门弱类（变量都用var）动态类型解释性脚本（不需要编译）语言</p><ol><li><p>OOP:面向对象，面向对象是一种编程思想，用一句话说就是封装，继承，多态。在JavaScript是弱类型语言天然具备多态的特性。使用函数进行封装，通过原型实现继承；</p></li><li><p>原型是一个对象，其他对象可以通过它实现属性继承。继承有原型继承，构造函数继承，混合继承，JavaScript通过混合继承实现面向对象思想。原型继承缺点是属性和方法都共享了，<br>构造函数继承缺点是浪费内存，所以结合构造函数继承和原型继承实现面向对象。</p></li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">原型是一个对象，其他对象可以通过它实现属性的继承</div><div class="line">原型prototype是构造函数的属性，本质是对象（可理解成object的实例对象）</div><div class="line">原型继承  修改子集构造函数的prototype指向父级构造函数的实例对象</div><div class="line">  缺点：不能给父级构造函数传递参数</div><div class="line">父级构造函数中的引用类型的数据会被子集构造函数实例共享</div><div class="line">构造函数继承  目的：把父级所有的属性继承过来 </div><div class="line">  缺点：无法继承父级构造函数原型中的成员</div><div class="line">混合继承  组合原型继承和构造函数继承</div><div class="line">  代码有冗余，浪费内容，但其带来的好处远大于这点内存</div></pre></td></tr></table></figure><ol><li><p>闭包用一句话说拿到你不该拿的东西，代码实现是函数里面return 一个函数，自执行函数也是闭包也叫作沙箱就是让内部变量不会污染全局；闭包的特点是闭包可以读取函数内部变量，<br>将函数内部变量的值始终保存在内存中，保护函数内的变量不被更改；闭包的用途：缓存数据提高计算性能，</p></li><li><p>ES6 let 其声明的变量只在当前代码块中有效</p></li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">       ES6中定义了块级作用域（&#123; &#125;）</div><div class="line">       let（声明变量）  const（声明常量）</div><div class="line">面试       变量的解构赋值：按照某种模式，从数组和对象中提取值并对对象进行赋值称为解构</div><div class="line">       箭头函数 () =&gt; &#123;&#125;</div><div class="line">       数组扩展，字符串扩展，函数扩展</div><div class="line">相当于是创建了块级作用域, const定义常量不能更改但是可以更改对象里属性；变量的解构赋值[a,b,c] = [1,2,3] ; 箭头函数 ；数组扩展Array.from()  Array.of()</div></pre></td></tr></table></figure><h3 id="3-使用-Ajax-进行前后台数据交互-使用-JSONP-解决浏览器常见的跨域请求问题"><a href="#3-使用-Ajax-进行前后台数据交互-使用-JSONP-解决浏览器常见的跨域请求问题" class="headerlink" title="3. 使用 Ajax 进行前后台数据交互,使用 JSONP 解决浏览器常见的跨域请求问题;"></a>3. 使用 Ajax 进行前后台数据交互,使用 JSONP 解决浏览器常见的跨域请求问题;</h3><h5 id="Ajax"><a href="#Ajax" class="headerlink" title="Ajax:"></a>Ajax:</h5><ol><li>为什么要进行异步加载：</li></ol><p>静态网站和动态网站都是同步的，同步开发的缺点：页面请求响应式阻塞，影响用户体验，为了解决这个问题，可以通过变通的手段实现页面的局部更新（隐藏帧），<br>由于隐藏帧不方面，就有了ajax</p><ol><li>哪些方法可以实现异步加载：</li></ol><p>（1）动态插入script标签<br>（2）通过ajax获取JS代码，然后通过eval执行<br>（3）Script标签添加defer或async属性<br>（4）创建并插入iframe,让它异步加载JS<br>（5）ajax</p><ol><li>简述ajax的过程：</li></ol><p>（1）创建xhr对象—-xhr = new XMLHttpRequest();<br>（2）配置发送参数—-xhr.open(type,url,async);<br>（3）发送—-xhr.send(params);<br>（4）处理响应—-xhr.onreadystatechange = function(){};<br>或：<br>（1）创建XMLHttpRequest对象，也就是创建一个一度调用对象<br>（2）创阿一个新的http请求，并制定http请求的方式、地址、和验证信息<br>（3）设置响应http请求状态发生变化的函数<br>（4）发送http请求<br>（5）获取异步调用返回的数据<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">//1.创建xhr对象</div><div class="line">var xhr = new XMLHttpRequest( ) ;</div><div class="line">//2.配置发送参数</div><div class="line">xhr.open( ‘get/post’ , url );</div><div class="line">//3.发送</div><div class="line">xhr.send();</div><div class="line">//4.1处理响应（指定回调函数）是由浏览器自己调用</div><div class="line">xhr.onreadystatechange = function()&#123;&#125;</div></pre></td></tr></table></figure></p><ol><li>post请求要设置请求头</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">xhr.setRequestHeader(&quot;Content-Type&quot;, &quot;application/x-www-form-urlencoded&quot;);</div><div class="line">readyState--XMLHttpRequest对象的处理状态</div><div class="line">responseText--用于获取服务器的响应文本</div><div class="line">responseXML--用于获取服务器端响应的XML文档对象</div><div class="line">status--该属性是服务器返回的状态文本信息（http协议的状态码）</div><div class="line">readyState:--请求响应过程中的五种状态</div><div class="line">0 --XMLHttpRequest对象还没有完成初始化</div><div class="line">1 --XMLHttpRequest对象开始发送请求</div><div class="line">2 --XMLHttpRequest对象的请求发送完成</div><div class="line">3 --XMLHttpRequest对象开始读取服务器的响应</div><div class="line">4 --XMLHttpRequest对象读取服务器响应结束</div></pre></td></tr></table></figure><ol><li>status:–http协议的状态码</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">400--无法找到请求的资源</div><div class="line">401--访问资源的权限不足</div><div class="line">403--没有权限访问资源</div><div class="line">404--需要访问的资源不存在</div><div class="line">405--需要访问的资源被禁止</div><div class="line">407--访问的资源需要代理身份验证</div><div class="line">414--请求的url太长</div><div class="line">500--服务器内部错误</div><div class="line">304-- 重定向</div></pre></td></tr></table></figure><ol><li>Get 和 post 的区别：</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">（1）内存不同：get提交数据最多是4KB。Post一般是80-100KB</div><div class="line">（2）请求参数放置位置：get提交的数据参数放在URL地址后面；</div><div class="line">              Post请求提交的数据放在请求体中</div><div class="line">（3）安全性：post请求比get请求方式安全</div><div class="line">（4）Get是向服务器索取数据的一种请求，post是向服务器提交数据的一种方式</div><div class="line">（5）Post提交需要设置请求头，get发送请求不用设置请求头</div><div class="line">（6）一般推荐用get方式发送请求</div></pre></td></tr></table></figure><ol><li>jsonp：跨域解决方案</li></ol><p>原理：动态创建script标签，利用script标签向外部网站请求数据不会被拒绝的特性，<br>实现<script src="www.xxx.com/public/libs/data.php?callback=fn"></script><br>Jsonp的本质是浏览器发送一个事先定义好的函数的名字给服务器，服务端获取这个函数的名字，然后拼接（）后，将其返回；<br>Jsonp是一种良好的跨域解决方案，原理时：src属性具有天然跨域的能力<br>跨域还可以用“反向代理”</p><ol><li>回调地狱</li></ol><p>相信经常使用ajax的前端小伙伴，都会遇到这样的困境：一个接口的参数会需要使用另一个接口获取。<br>年轻的前端可能会用同步去解决（笑~），因为我也这么干过，但是极度影响性能和用户体验。<br>正常的前端会把接口写在另一个接口的回调里。是这样不错，但是它增加了函数的嵌套深度也会造成一定的逻辑混乱。<br>也许有朋友会说，哪那么多毛病，解决问题不就好了吗？<br>但是，如果需要的是另外好几个接口的返回数据呢？这时候就会比较蛋疼了。这就是回调地狱！<br>当时依稀记得是使用了jQuery的 when .then方法去解决的。<br>直到遇见了Promise,它完美优雅的解决了回调地狱难题！<br>//创建一个Promise实例，获取数据。并把数据传递给处理函数resolve和reject。需要注意的是Promise在声明的时候就执行了。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div></pre></td><td class="code"><pre><div class="line">var getUserInfo=new Promise(function(resolve,reject)&#123;</div><div class="line">    $.ajax(&#123;</div><div class="line">        type:&quot;get&quot;,</div><div class="line">        url:&quot;index.aspx&quot;,</div><div class="line">        success:function(data)&#123;</div><div class="line">            if(data.Status==&quot;1&quot;)&#123;</div><div class="line">                resolve(data.ResultJson)//在异步操作成功时调用</div><div class="line">            &#125;else&#123;</div><div class="line">                reject(data.ErrMsg);//在异步操作失败时调用</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;);</div><div class="line">&#125;)</div><div class="line">//另一个ajax Promise对象，</div><div class="line">var getDataList=new Promise(function(resolve,reject)&#123;</div><div class="line">    $.ajax(&#123;</div><div class="line">        type:&quot;get&quot;,</div><div class="line">        url:&quot;index.aspx&quot;,</div><div class="line">        success:function(data)&#123;</div><div class="line">            if(data.Status==&quot;1&quot;)&#123;</div><div class="line">                resolve(data.ResultJson)//在异步操作成功时调用</div><div class="line">            &#125;else&#123;</div><div class="line">                reject(data.ErrMsg);//在异步操作失败时调用</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;);</div><div class="line">&#125;)</div><div class="line">//Promise的方法then,catch方法</div><div class="line">getUserInfo.then(function(ResultJson)&#123;</div><div class="line">    //通过拿到的数据渲染页面</div><div class="line">&#125;).catch(function(ErrMsg)&#123;</div><div class="line">    //获取数据失败时的处理逻辑</div><div class="line">&#125;)</div><div class="line">//Promise的all方法，等数组中的所有promise对象都完成执行</div><div class="line">Promise.all([getUserInfo,getDataList]).then(function([ResultJson1,ResultJson2])&#123;</div><div class="line">    //这里写等这两个ajax都成功返回数据才执行的业务逻辑</div><div class="line">&#125;)</div><div class="line"></div><div class="line">这样的代码分工非常明确，ajax就是拿数据的，.then .catch方法就是处理业务逻辑，代码异常清晰。</div><div class="line"></div><div class="line">Promise：</div><div class="line">Promise是ES6中解决一步嵌套的一种方案，promise是一个构造函数</div><div class="line">Const promise = new Promise(function(resolve,rejected)&#123;</div><div class="line">If(成功了)&#123;</div><div class="line">Resolve();</div><div class="line">&#125;else&#123;</div><div class="line">//失败了，调用rejected</div><div class="line">Rejected();</div><div class="line">&#125;</div><div class="line">&#125;)</div><div class="line">Promise.then(function()&#123;&#125;);</div><div class="line">Promise.catch(function()&#123;&#125;);</div></pre></td></tr></table></figure><p>slice &amp; splice $ split<br>slice<br>（数组）  array.slice(start,end);<br>对数组进行部分截取，返回值是一个数组副本slice(startindex,endinedx);</p><p>slice<br>（字符串） string.slice(start, end);<br>splice （数组） Array.splice(start,deleteCount, item…..);<br>splice方法从array中移除一个或多个数组，并用新的item替换它们。</p><p>Split<br>（字符串） String.split(separator, limit);<br>：split方法把这个string分割成片段来创建一个字符串数组。<br>split方法（函数）：第一个参数：要干掉的字符串，第二个参数：想要几个元素</p><h3 id="4-流式布局和响应式原理-Bootstrap-前端框架，开发响应式页面；"><a href="#4-流式布局和响应式原理-Bootstrap-前端框架，开发响应式页面；" class="headerlink" title="4. 流式布局和响应式原理,Bootstrap 前端框架，开发响应式页面；"></a>4. 流式布局和响应式原理,Bootstrap 前端框架，开发响应式页面；</h3><p>流式布局也叫百分比布局，缺点是宽度使用百分比定义，但是高度和文字大小等大都是用px来固定，所以在大屏幕的手机下显示效果会变成有些页面元素宽度被拉的很长，<br>但是高度、文字大小还是和原来一样（即，这些东西无法变得“流式”），显示非常不协调。<br>rem: 通过媒体查询检查屏幕宽度设定html元素的font-size，然后各处（元素尺寸、文字大小）使用rem作为单位，随后搭配媒体查询或JS，根据屏幕的大小来动态控制html<br>元素的font-size,即可自动改变所有用rem定义尺寸的元素的大小.</p><ol><li>bootstrap: —–前端框架</li></ol><p>原理：媒体查询，在不同的屏幕宽度范围下使用不同的容器宽度。<br>随着Web应用变的越来越复杂，在大量的开发过程中我们发现有许多功能模块非常相似，比如轮播图、分页、选项卡、导航栏等，开发中往往会把这些具有通用性的功能模块进行<br>一系列封装，使之成为一个个组件应用到项目中，可以极大的节约开发成本，将这些通用的组件缩合到一起就形成了前端框架。<br>Bootstrap 是最受欢迎的 HTML、CSS 和 JS 框架，用于开发响应式布局、移动设备优先的 WEB 项目。</p><ol><li>栅格布局：移动设备优先的流式栅格系统，随着屏幕或视口（viewport）尺寸的增加，系统会自动分为最多12列。</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">“行（row）”必须包含在 .container （固定宽度）或 .container-fluid （100% 宽度）中，以便为其赋予合适的排列（aligment）和内补（padding）。</div><div class="line">通过“行（row）”在水平方向创建一组“列（column）”。</div><div class="line">你的内容应当放置于“列（column）”内，并且，只有“列（column）”可以作为行（row）”的直接子元素。</div><div class="line">响应式工具：</div><div class="line">.visible-xs-*   超小屏幕手机 (&lt;768px)可见</div><div class="line">.visible-sm-*   小屏幕平板 (≥768px)可见</div></pre></td></tr></table></figure><h3 id="5-前端模块化开发，less-sass-等预处理；"><a href="#5-前端模块化开发，less-sass-等预处理；" class="headerlink" title="5. 前端模块化开发，less/sass 等预处理；"></a>5. 前端模块化开发，less/sass 等预处理；</h3><ol><li>requireJS</li></ol><p>业务多了，前端代码量也逐渐增大，我们渐渐的依赖js实现的交互越来越多，长期以来会导致我们的代码维护越来越困难；<br>RequireJS（模块加载器）是一个非常小巧的JavaScript模块载入框架，是AMD规范最好的实现者, 实现js文件的异步加载，避免网页失去响应；管理模块之间的依赖性，便于代码的编写和维护。</p><p>Asynchronous Module Definition，用白话文讲就是 异步模块定义，所有的模块将被异步加载，模块加载不影响后面语句运行。所有依赖某些模块的语句均放置在回调函数中。</p><ul><li>作用是：<ol><li>将公共功能进行封装实现复用；</li><li>灵活解决依赖；</li><li>解决全局变量污染；</li></ol></li></ul><ol><li>定义一个独立模块</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div></pre></td><td class="code"><pre><div class="line">//独立模块，不依赖其他模块，可以直接定义</div><div class="line">define(&#123;</div><div class="line">  method1: function()&#123;&#125;,</div><div class="line">  method2: function()&#123;&#125;</div><div class="line">&#125;);</div><div class="line"></div><div class="line">定义一个有依赖的模块</div><div class="line">define([ &apos;依赖的模块&apos; ], function( $ ) &#123;</div><div class="line">   // 业务代码</div><div class="line">   return &#123;</div><div class="line">      // 供其他模块使用</div><div class="line">   &#125;</div><div class="line"> &#125;);</div><div class="line"></div><div class="line">加载模块</div><div class="line">  require( [&apos;jquery&apos;,&apos;tool&apos;] , function( $ , tool )&#123; </div><div class="line">       // 业务代码</div><div class="line">   &#125; ) ;</div><div class="line"></div><div class="line">require.config() 配置</div><div class="line">require.config(&#123;</div><div class="line">  baseUrl:&apos;/public&apos;,  //设置根路径，require里的所有路径都以此为准</div><div class="line">  paths:&#123;</div><div class="line">    jquery:&apos;./libs/jquery/jquery.min&apos;, //取别名</div><div class="line">  &#125;,</div><div class="line">  shim:&#123;</div><div class="line">    bootstrap:&#123;</div><div class="line">      deps:[&apos;jquery&apos;]  //bootstrap依赖jQuery</div><div class="line">    &#125;,</div><div class="line">    ckeditor:&#123;</div><div class="line">      exports:&apos;CKEDITOR&apos;  //ckeditor不支持模块化，向外暴露变量CKEDITOR</div><div class="line">    &#125;</div><div class="line">  &#125;</div><div class="line">&#125;)</div></pre></td></tr></table></figure><ol><li>amd和cmd的区别</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">require.js   AMD是依赖前置的，换句话说，在解析和执行当前模块之前，模块作者必须指明当前模块所依赖的模块</div><div class="line">sea.js  (CMD)就近依赖： 即在代码运行时，首先是不知道依赖的，需要遍历所有的require关键字，从而找出依赖(使用字符串的正则表达式匹配)，与AMD的依赖引入方法相比，</div><div class="line">                        确实有其方便之处，但前提是以性能为代价的。</div><div class="line">1.定位有差异。RequireJS 想成为浏览器端的模块加载器，同时也想成为 Rhino / Node 等环境的模块加载器。Sea.js 则专注于 Web 浏览器端，同时通过 Node 扩展的方式可以</div><div class="line">  很方便跑在 Node 环境中。</div><div class="line">2.遵循的规范不同。RequireJS 遵循 AMD（异步模块定义）规范，Sea.js 遵循 CMD （通用模块定义）规范。规范的不同，导致了两者 API 不同。Sea.js 更贴近 CommonJS Modules/1.1</div><div class="line">  和 Node Modules 规范。</div><div class="line">3.推广理念有差异。RequireJS 在尝试让第三方类库修改自身来支持 RequireJS，目前只有少数社区采纳。Sea.js 不强推，采用自主封装的方式来“海纳百川”，目前已有较成熟的封装策略。</div><div class="line">4.对开发调试的支持有差异。Sea.js 非常关注代码的开发调试，有 nocache、debug 等用于调试的插件。RequireJS 无这方面的明显支持。</div><div class="line">5.插件机制不同。RequireJS 采取的是在源码中预留接口的形式，插件类型比较单一。Sea.js 采取的是通用事件机制，插件类型更丰富。</div></pre></td></tr></table></figure><ol><li>less</li></ol><p>Less 是一门 CSS 预处理语言，它扩展了 CSS 语言，增加了变量、Mixin、函数等特性，使 CSS 更易维护和扩展。<br>Css预处理器是一种语言，用来为css增加一些编程的特性，无需考虑浏览器的兼容问题，并且你可以在css中使用变量、简单的程序逻辑，函数等；可以让css更简洁、适应性强，代码更直观等；</p><p>LESS 是动态的样式表语言，通过简洁明了的语法定义，使编写 CSS 的工作变得非常简单，本质上，LESS 包含一套自定义的语法及一个解析器。</p><p>less 是 CSS处理器的一种，用来管理和维护CSS，并且LESS是使用Nodejs 开发的一个工具包，第三方模块<br>要使用LSSS需要安装Nodejs,环境<br>想或得Nodejs环境，只需要安装一个软件即可</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;技术掌握&quot;&gt;&lt;a href=&quot;#技术掌握&quot; class=&quot;headerlink&quot; title=&quot;技术掌握&quot;&gt;&lt;/a&gt;技术掌握&lt;/h1&gt;&lt;h3 id=&quot;1-HTML-和-CSS，书写语义合理、结构清晰、易于维护的页面结构，还原设计图，并处流浏览器的兼容性问题；&quot;&gt;&lt;
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>博文公园</title>
    <link href="http://yoursite.com/2017/09/10/Web%E9%9A%8F%E5%BF%83%E8%AE%B0/"/>
    <id>http://yoursite.com/2017/09/10/Web随心记/</id>
    <published>2017-09-10T04:46:41.399Z</published>
    <updated>2017-09-10T05:59:35.078Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Welcome-to-酷K-blog"><a href="#Welcome-to-酷K-blog" class="headerlink" title="Welcome to 酷K.blog"></a>Welcome to 酷K.blog</h1><p>去交让你开心的朋友<br>去爱不会让你流泪流泪的人<br>去向自己想去的方向<br>去完成不论大小的梦想<br>生活应该是美好而又温柔的<br>你也是</p><h3 id="W3C标准"><a href="#W3C标准" class="headerlink" title="W3C标准"></a>W3C标准</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">[W3C标准：万维网联盟的缩写。W3C不是某个标准，而是一系列标准的集合。World Wide Web Consortium万维网络联盟，</div><div class="line">是Web技术领域最具权威和影响力的国际中立性技术标准机构，到目前为止，W3C已发布了200多项web技术标准及实施指南，</div><div class="line">如：超文本标记语言（HTML）、可扩展标记语言（XML）等，有效促进了web技术的互相兼容，对互联网技术的发展和应用起</div><div class="line">到了基础性和根本性的支撑作用。</div><div class="line"></div><div class="line">对应标准也分为：</div><div class="line">              1.结构化标准语言（XHTML、XML）</div><div class="line">              2.表现标准语言（CSS）</div><div class="line">              3.行为标准（文档对象模型--W3C DOM、ECMAScript）]</div></pre></td></tr></table></figure><h2 id="原型（prototype）"><a href="#原型（prototype）" class="headerlink" title="原型（prototype）"></a>原型（prototype）</h2><ol><li>对象  JavaScript中万物皆对象，分为普通对象（new出来的实例对象–new Object/Array/Foo）和函数对象（Array、Object、Function…JS自带的函数对象）</li><li>原型  原型prototype是构造函数的属性，本质是对象（可理解成object的实例对象）<br>是一个对象，其他对象可以通过它实现属性的继承</li><li>原型</li><li>作用  数据共享</li><li>实现继承</li><li>原型链 实例对象和原型对象之间通过<strong>proto</strong>来联系的，这种关系叫做原型链，当访问一个对象的属性时，它不仅仅在该对象上搜寻，还会搜寻该对象的原型对象</li><li>（prototype），以及该原型对象的原型对象，层层向上搜，直到找到此属性或达到原型链的末尾（Object.prototype—-&gt;null）</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">Prototype与__proto__ 每个函数都有一个prototype属性和__proto__属性</div><div class="line">  当函数为普通函数时，关注的是：Prototype属性,指向自己的原型对象（foo.prototyope）</div><div class="line">  当函数为构造函数时，关注的是：__proto__,指向这个函数的构造函数的原型对象</div><div class="line">__proto__ JS在创建对象的时候（不论是普通对象还是函数对象），都有一个内置对象__proto__属性，用来指向创建它的函数对象的原型对象（prototype）</div><div class="line">Prototype 每个函数都有一个原型属性prototype指向自身的原型</div></pre></td></tr></table></figure><p>原型是一个对象，其他对象可以通过它实现属性的继承<br>原型prototype是构造函数的属性，本质是对象（可理解成object的实例对象）<br>原型继承  修改子集构造函数的prototype指向父级构造函数的实例对象<br>缺点：不能给父级构造函数传递参数<br>父级构造函数中的引用类型的数据会被子集构造函数实例共享<br>构造函数继承  目的：把父级所有的属性继承过来<br>无法继承父级构造函数原型中的成员<br>混合继承  组合原型继承和构造函数继承<br>代码有冗余，浪费内容，但其带来的好处远大于这点内存</p><h2 id="闭包"><a href="#闭包" class="headerlink" title="闭包"></a>闭包</h2><p>定义：封闭的包裹（区域），主要指嵌套的函数，函数的嵌套形成闭包<br>通俗的说：拿到自己不该拿到的东西<br>组成：内层函数本身，内层函数所处的作用域<br>特点：闭包可以读取函数内部变量，将函数内部变量的值始终保存在内存中，保护函数内的变量不被改变。<br>作用：（1）形成隔离的封闭空间（作用域）<br>      （2）延长变量的声明周期<br>      （3）缓存数据，提高计算性能<br>缺点：延长作用域链，内存长时间得不到释放（浪费内存），尽量不用。<br>一个函数A中return 一个函数B，函数B可以访问函数A中定义的变量，此时还可以进行数据的缓存，就形成了闭包<br> 闭包用一句话说拿到你不该拿的东西，代码实现是函数里面return 一个函数，自执行函数也是闭包也叫作沙箱就是让内部变量不会污染全局；<br> 闭包的特点是闭包可以读取函数内部变量，将函数内部变量的值始终保存在内存中，保护函数内的变量不被更改；闭包的用途：缓存数据提高计算性能，</p><h2 id="作用域"><a href="#作用域" class="headerlink" title="作用域"></a>作用域</h2><p>定义：变量和函数的可访问范围，即作用域控制着变量和函数的可见性和生命周期；在JavaScript中有‘全局作用域’和‘局部作用域’<br>全局作用域 在代码中任何地方都能访问到的对象拥有全局作用域<br>（1）最外层函数和在最外层函数外面定义的变量拥有全局作用域<br>（2）所有未定义直接声明的变量自动声明为拥有全局作用域<br>（3）所有window对象的属性拥有全局作用域<br>局部作用域 一般只有在固定的代码片段内可以访问，例如函数内部<br>作用域链  当在一个函数的内部访问一个变量时，这个变量在这个函数内部如果是不存在的，就去这个函数的外部去找，找到了就能够使用，找不到就再往外面找，<br>直到找到这个函数所在的script标签（全局作用域），形成了作用域链<br>全局的作用域中定义的变量，可以看成是在作用域链上的最上面（0级作用域，也是最高级）</p><p>模块化开发 定义：一个模块就是实现特定功能的文件，有了模块我们就可以方便的使用别人的代码，想要什么功能就加载什么模块。模块开发需要遵循一定的规范<br>ECMAScript在低版本（ES5）是不具备模块的能力，为了实现模块化，有些牛人专门写了一些类库来弥补ECMAScript的缺陷，就又有些人定义了一些规范（AMD CMD CommonJS）<br>来加载模块，开发模块类库的人需要遵循这些规范，其中AMD 和 CMD 适用于浏览器，CommonJS适用于Nodejs（后端）<br>如果开发者遵循了 AMD 的规范来定义模块<br>define([‘’],function(){<br>     return {};<br>});<br>那么还需要一个模块加载器来加载模块，其中 requirejs（模块加载器）是可以加载AMD规范的模块<br>也可以使用 CMD 规范来定义模块<br>define(function(require, exports, module){<br>     require();//可以加载其它模块<br>     //使用 exports 和 module 将这些模块开放出去<br>     exports.sayHi = function(){//向外开放了sayHi方法};<br>     module.exports = {sayHi : sayHi};<br>});<br>使用国人开发的seajs（模块加载器）可以用来加载 CMD 规范的模块</p><h2 id="HTML5"><a href="#HTML5" class="headerlink" title="HTML5"></a>HTML5</h2><p>HTML5不仅仅是只作为HTML的最新版本，更重要的是它制定了web开发的一系列标准，成为第一个将web作为应用开发平台的HTML语言；<br>HTML5定义了一系列的新元素，如语义标签、智能表单，多媒体标签等，可以帮助开发者创建富互联网应用，还提供了一系列的JavaScript api：地理定位、重力感应、硬件访问等，<br>可以在浏览器内实现类原生应用，甚至结合canvas我们可以开发网页版游戏，同时结合css3的过渡、转换、动画等特性，可以极大增强用户体验，提升开发工能的可用性<br>我们日常讨论的H5是一个泛指，是：HTML5+CSS3+JavaScript等技术组合而成的一个应用开发平台<br>HTML5语法特点 更简洁<br>更宽松<br>标签语义化 所谓标签语义化就是HTML标签具备很好的可读性，可以清晰传达每个标签所要表达的意义。以便被友好的处理和解析<br>Nav（导航）、header footer section artical aside progress（进度条）<br>兼容处理  在不支持HTML5新标签的浏览器（IE8及以下）里，会将这些标签解析成行内元素（inline）对待，我们需要把其转换成块元素（block），在IE9版本以下不能正常解析这些新标签。<br>我们可以加载一个第三方JS库来解决这个问题（腻子脚本），会自动通过document.createElement(‘tagName’);创建所有HTML5标签</p><p>微数据 微数据是在如span div 标签中添加属性，让机器（如搜索引擎）识别其含义，如评论、人物信息、事件都有相应的属性，用来描述其含义，可以理解成新语义标签的一种补充</p><ol><li>HTML5 多媒体</li></ol><p>音频  <audio arc="”./see" youo="" again.mp3”=""></audio><br>视屏  <video src="”./movie.mp4”" controls="”controls”"></video></p><ol><li>HTML5 DOM扩展</li></ol><p>获取元素  document.getElementByClassName(‘class’);—通过类名获取–数组<br>document.querySelector(‘各种选择器都可以’);<br>document.querySelectorAll(‘各种选择器都可以’);—数组<br>类名  Node.classList.add(‘class’);–添加class<br>Node.classList.remove(‘class’);–移除class<br>Node.classList.toggle(‘class’);–切换class<br>Node.classList.contains(‘class’);–检测是有这个class<br>自定义属性 var demo = document.querySelector(‘#demo’);<br>读取 demo.dataset[‘name’] 或者 demo.dataset.age<br>设置 demo.dataset[‘name’] = ‘web developer’</p><ol><li>HTML5 新增API</li></ol><p>网络状态  window.onLine()<br>全屏  1、Node.requestFullScreen() 开启全屏显示<br>      2、Node.cancelFullScreen()  关闭全屏显示<br>文件读取  FileReader<br>地理定位  navigator.geolocation.getCurrentPosition(successcb,errcb);<br>          navigator.geolocation.watchPosition(successcb,errcb);<br>历史管理  Window.history<br>事件监听  Oppopstate:当前进或后退时则触发，通过事件对象ev.state可以读取到存储的数据。</p><ol><li>HTML5规范新增 web存储</li></ol><p>持久化：将数据长时间保存<br>后端语言常常使用数据库来实现数据的持久化  前端也有将数据持久化的处理，以前是通过cookie简单实现，但这种方式使用起来不方便，<br>HTML5提出了新的解决方案实现数据的持久化  sessionStorage 和 localStorage<br>sessionStorage 与 localStorage 的区别  1）存储大小：sessionStorage–约 5M；  localStorage–约 20M<br>     2)生命周期：sessionStorage–关闭当前窗口； localStorage–永久存在，除非手动清空<br>     3）数据共享：sessionStorage—当前窗口； localStorage–同域下的多窗口</p><p>sessionStorage 与 session 的关系：没关系，<br>session 是会话机制的组成部分，是服务端的技术构成<br>sessionStorage 只是存储数据的一个机制，是前端的技术构成<br>cookie sessionStorage localStorage 三者都是前端的技术构成</p><h2 id="Cookie-和-session"><a href="#Cookie-和-session" class="headerlink" title="Cookie 和 session"></a>Cookie 和 session</h2><p>客户端（浏览器）和 服务器进行通信的过程称为一次会话<br>可以这样理解：一次请求+一次响应=一次会话<br>服务器 可以对应多个 客户端（浏览器）<br>如果 A 浏览器访问了 Z 服务器<br>如果 B 浏览器也访问 Z 服务器<br>为了能记住 Z 服务器明确知道是谁（A 或 B）进行访问，需要借助 cookie 和 sesion 来完成<br>当服务器与浏览器进行会话时，会将 cookie 信息以请求头的形式发送给服务器<br>利用上述特点，可以为不同的浏览器设置不同的cookie<br>例如： A 浏览器设置的 cookie 为 PHPSESSID=123abc<br>        B 浏览器设置的 cookie 为 PHPSESSID=456abc<br>当前进行会话时，A 的 cookie PHPSESSID=123abc 和 B 的 PHPSESSID=456abc<br>都会发送到 服务器， 由于 A 和 B 的 cookie 不一样，服务器就可以进行区分，进而得知是谁在访问<br>上述的 cookie 是服务器上设置 session 的同时 浏览器也就进行设置cookie</p><h2 id="CSS3"><a href="#CSS3" class="headerlink" title="CSS3"></a>CSS3</h2><p>CSS3是CSS2的“进化”版本，在CSS2基础上，增强或新增了许多特性， 弥补了CSS2的众多不足之处，使得Web开发变得更为高效和便捷。</p><ol><li>CSS3现状   </li></ol><p>浏览器支持程度差，需要加私有前缀<br>（IE=-ms-; chrome=-webkit-; firebox=-moz-; opera=-o-）<br>移动端支持优于PC端<br>不断改进中<br>应用相对广泛</p><ol><li>如何对待  </li></ol><p>坚持渐进增强的原则<br>考虑用户群体<br>遵照产品的方案</p><ol><li>颠覆性代表 </li></ol><p>过渡（transition）<br>2D转换（transform:translate() rotate() scale()）<br>transform-origin:0 20px;<br>3D转换<br>CSS3 动画 animation<br>伸缩布局（弹性盒子/弹性布局）</p><h2 id="this"><a href="#this" class="headerlink" title="this"></a>this</h2><p>this 是函数运行时自动生成的一个内部对象，只能在内部使用，但总是指向调用它的对象<br>this指向 : this到底指向谁取决于函数调用的方式<br>        1、普通函数中的this—-&gt;window<br>        2、构造函数中的this—-&gt;实例对象<br>        3、原型方法中的this—-&gt;实例对象<br>        4、对象方法中的this—-&gt;谁调用指向谁<br>        5、定时函数中的this—-&gt;window<br>        6、事件函数中的this—-&gt;绑定事件的对象<br>call/apply可以改变this的指向，使其指向第一个参数<br>什么时候需要缓存this—-this指向发生改变</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;Welcome-to-酷K-blog&quot;&gt;&lt;a href=&quot;#Welcome-to-酷K-blog&quot; class=&quot;headerlink&quot; title=&quot;Welcome to 酷K.blog&quot;&gt;&lt;/a&gt;Welcome to 酷K.blog&lt;/h1&gt;&lt;p&gt;去交让你开心
      
    
    </summary>
    
    
  </entry>
  
</feed>
